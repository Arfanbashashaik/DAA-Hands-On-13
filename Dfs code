from collections import defaultdict

class DFSGraph:
    def __init__(self):
        self.adjacency_list=defaultdict(list)
    def insert_edge(self,source,destination):
        self.adjacency_list[source].append(destination)
    def depth_first_visit(self,current_node,traversal_status):
        traversal_status[current_node]=True
        print(current_node,end=' ')
        for reachable_node in self.adjacency_list[current_node]:
            if not traversal_status[reachable_node]:
                self.depth_first_visit(reachable_node,traversal_status)
    def perform_dfs(self,starting_node):
        traversal_status = defaultdict(bool)
        self.depth_first_visit(starting_node,traversal_status)
# Example usage
graph = DFSGraph()
graph.insert_edge(1,2)
graph.insert_edge(1,3)
graph.insert_edge(2,4)
graph.insert_edge(2,5)
graph.insert_edge(3,6)
graph.insert_edge(3,7)
graph.insert_edge(4,8)
graph.insert_edge(5,9)
graph.insert_edge(6,10)
graph.insert_edge(7,11)
print("DFS traversal starting from node 1:")
graph.perform_dfs(1)

